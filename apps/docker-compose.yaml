networks:
  logstream:
    driver: bridge

services:

  redis:
    image: redis:7-alpine
    container_name: logstream-redis
    ports:
      - "${REDIS_EXTERNAL_PORT}:6379"
    networks:
      - logstream
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT}
          cpus: '${REDIS_CPU_LIMIT}'

  producer:
    build: 
      context: ./producer
      dockerfile: Dockerfile
    container_name: logstream-producer
    ports:
      - "${PRODUCER_EXTERNAL_PORT}:3001"
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - NODE_ENV=${NODE_ENV}
    networks:
      - logstream
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${PRODUCER_MEMORY_LIMIT}
          cpus: '${PRODUCER_CPU_LIMIT}'

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: logstream-consumer
    ports:
      - "${CONSUMER_EXTERNAL_PORT}:3002"
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - MONGODB_URL=${MONGODB_URL}
      - NODE_ENV=${NODE_ENV}
    networks:
      - logstream
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${CONSUMER_MEMORY_LIMIT}
          cpus: '${CONSUMER_CPU_LIMIT}'

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: logstream-api-gateway
    ports:
      - "${API_GATEWAY_EXTERNAL_PORT}:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
    networks:
      - logstream
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${API_GATEWAY_MEMORY_LIMIT}
          cpus: '${API_GATEWAY_CPU_LIMIT}'

  # Simulator for App 1
  simulator-app1:
    build:
      context: ./simulator
      dockerfile: Dockerfile
    container_name: logstream-simulator-app1
    environment:
      - APP_NAME=app1
    volumes:
      - ./simulator/logs/app1:/usr/src/app/logs
    networks:
      - logstream
    depends_on:
      producer:
        condition: service_healthy
    restart: unless-stopped

  # Simulator for App 2  
  simulator-app2:
    build:
      context: ./simulator
      dockerfile: Dockerfile
    container_name: logstream-simulator-app2
    environment:
      - APP_NAME=app2
    volumes:
      - ./simulator/logs/app2:/usr/src/app/logs
    networks:
      - logstream
    depends_on:
      producer:
        condition: service_healthy
    restart: unless-stopped

  # Simulator for App 3
  simulator-app3:
    build:
      context: ./simulator
      dockerfile: Dockerfile
    container_name: logstream-simulator-app3
    environment:
      - APP_NAME=app3
    volumes:
      - ./simulator/logs/app3:/usr/src/app/logs
    networks:
      - logstream
    depends_on:
      producer:
        condition: service_healthy
    restart: unless-stopped

  # Fluent Bit for App 1
  fluent-bit-app1:
    build:
      context: ./fluent-bit
      dockerfile: Dockerfile
    container_name: logstream-fluent-bit-app1
    environment:
      - APP_NAME=app1
      - LOG_PATH=/simulator/logs/app.log
      - PRODUCER_HOST=${PRODUCER_HOST}
      - PRODUCER_PORT=${PRODUCER_PORT}
      - NODE_ENV=${NODE_ENV}
    volumes:
      - ./simulator/logs/app1:/simulator/logs:ro
      - ./fluent-bit/storage/app1:/fluent-bit/storage
      - ./fluent-bit/configs/app1.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - logstream
    depends_on:
      producer:
        condition: service_healthy
      simulator-app1:
        condition: service_started
    restart: unless-stopped
    ports:
      - "${FLUENT_BIT_APP1_PORT}:2020"

  # Fluent Bit for App 2
  fluent-bit-app2:
    build:
      context: ./fluent-bit
      dockerfile: Dockerfile
    container_name: logstream-fluent-bit-app2
    environment:
      - APP_NAME=app2
      - LOG_PATH=/simulator/logs/app.log
      - PRODUCER_HOST=${PRODUCER_HOST}
      - PRODUCER_PORT=${PRODUCER_PORT}
      - NODE_ENV=${NODE_ENV}
    volumes:
      - ./simulator/logs/app2:/simulator/logs:ro
      - ./fluent-bit/storage/app2:/fluent-bit/storage
      - ./fluent-bit/configs/app2.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - logstream
    depends_on:
      producer:
        condition: service_healthy
      simulator-app2:
        condition: service_started
    restart: unless-stopped
    ports:
      - "${FLUENT_BIT_APP2_PORT}:2020"

  # Fluent Bit for App 3
  fluent-bit-app3:
    build:
      context: ./fluent-bit
      dockerfile: Dockerfile
    container_name: logstream-fluent-bit-app3
    environment:
      - APP_NAME=app3
      - LOG_PATH=/simulator/logs/app.log
      - PRODUCER_HOST=${PRODUCER_HOST}
      - PRODUCER_PORT=${PRODUCER_PORT}
      - NODE_ENV=${NODE_ENV}
    volumes:
      - ./simulator/logs/app3:/simulator/logs:ro
      - ./fluent-bit/storage/app3:/fluent-bit/storage
      - ./fluent-bit/configs/app3.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - logstream
    depends_on:
      producer:
        condition: service_healthy
      simulator-app3:
        condition: service_started
    restart: unless-stopped
    ports:
      - "${FLUENT_BIT_APP3_PORT}:2020"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: logstream-frontend
    ports:
      - "${FRONTEND_EXTERNAL_PORT}:5173"
    environment:
      - NODE_ENV=${NODE_ENV}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    networks:
      - logstream
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${FRONTEND_MEMORY_LIMIT}
          cpus: '${FRONTEND_CPU_LIMIT}'

volumes:
  redis_data:
    driver: local
  fluent_bit_storage_app1:
    driver: local
  fluent_bit_storage_app2:
    driver: local
  fluent_bit_storage_app3:
    driver: local
